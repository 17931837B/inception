• このプロジェクトは仮想マシン上で完了させなければなりません。
• プロジェクトの設定に必要なすべてのファイルは、srcs フォルダに配置する必要があります。
• Makefile も必須であり、プロジェクトのルートディレクトリに配置する必要があります。これはアプリケーション全体をセットアップするものでなければなりません（つまり、docker-compose.yml を使用して Docker イメージをビルドする必要があります）。
• この課題は、あなたのバックグラウンドによってはまだ学習していない可能性のある概念の実践を必要とします。したがって、Docker の使用に関する広範なドキュメントや、この課題を完了するのに役立つその他のリソースを読むことをお勧めします。

必須パート

このプロジェクトでは、特定のルールに基づいた異なるサービスで構成される小さなインフラストラクチャをセットアップします。プロジェクト全体は仮想マシン内で行う必要があります。Docker Compose を使用する必要があります。

各 Docker イメージは、対応するサービスと同じ名前でなければなりません。
各サービスは、専用のコンテナ内で実行されなければなりません。
パフォーマンス上の理由から、コンテナは Alpine または Debian の最新の安定版の 1 つ前のバージョンからビルドする必要があります。どちらを選択するかはあなた次第です。

また、サービスごとに独自の Dockerfile を記述する必要があります。Dockerfile は、Makefile によって docker-compose.yml から呼び出される必要があります。

これは、プロジェクトの Docker イメージを自分でビルドする必要があることを意味します。したがって、既製の Docker イメージをプルしたり、DockerHub などのサービスを使用したりすることは禁止されています（Alpine/Debian はこのルールの例外です）。

次に、以下のものをセットアップする必要があります。

• TLSv1.2 または TLSv1.3 のみを使用する NGINX を含む Docker コンテナ。
• nginx なしで、php-fpm（インストールおよび設定済みである必要があります）のみを含む WordPress の Docker コンテナ。
• nginx なしで、MariaDB のみを含む Docker コンテナ。
• WordPress データベースを含むボリューム。
• WordPress ウェブサイトのファイルを含む 2 つ目のボリューム。
• コンテナ間の接続を確立する Docker ネットワーク。

コンテナは、クラッシュした場合に自動的に再起動する必要があります。
Docker コンテナは仮想マシンではありません。したがって、それを実行しようとする際に、tail -f や同様の方法に基づくような、いかなるハッキーなパッチを使用することも推奨されません。デーモンがどのように機能するのか、そしてそれらを使用することが良いアイデアなのかどうかについて調べてください。

もちろん、network: host、--link、または links: の使用は禁止されています。
network 行は docker-compose.yml ファイルに存在しなければなりません。
コンテナは、無限ループを実行するコマンドで起動してはなりません。したがって、これはエントリーポイントとして使用されるコマンドや、エントリーポイントスクリプトで使用されるコマンドにも当てはまります。以下は、禁止されているハッキーなパッチのいくつかの例です：tail -f、bash、sleep infinity、while true。

PID 1 と Dockerfile の作成に関するベストプラクティスについて調べてください。
• WordPress データベースには、2 人のユーザーが存在しなければならず、そのうちの 1 人は管理者でなければなりません。管理者のユーザー名には、admin、Admin、administrator、または Administrator を含めることはできません（例：admin、administrator、Administrator、admin-123 など）。

あなたのボリュームは、Docker を使用してホストマシンの /home/login/data フォルダで利用可能になります。もちろん、login はあなた自身のログイン名に置き換える必要があります。

プロセスを簡略化するために、あなたのドメイン名をローカル IP アドレスを指すように設定する必要があります。
このドメイン名は login.42.fr でなければなりません。繰り返しになりますが、あなた自身のログイン名を使用する必要があります。
たとえば、あなたのログイン名が wil の場合、wil.42.fr は Wil のウェブサイトを指す IP アドレスにリダイレクトされます。

latest タグは禁止されています。
パスワードは Dockerfile に記述してはなりません。
環境変数の使用は必須です。
環境変数を保存するために .env ファイルを使用し、機密情報を保存するために Docker secrets を使用することを強く推奨します。

あなたの NGINX コンテナは、インフラストラクチャへの唯一のエントリーポイントでなければならず、TLSv1.2 または TLSv1.3 プロトコルを使用して、ポート 443 経由でのみアクセス可能でなければなりません。

docker run --name test --gpus all -it mouse_project

